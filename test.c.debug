#define _GNU_SOURCE

#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <search.h>

#include <cith.h>

#define NUM_ENTRIES 10000
#define MAX_KEY_LENGTH 20
#define MAX_VALUE_LENGTH 50


void searchtest() {
    struct hsearch_data hash;
    memset(&hash, 0, sizeof(hash));
    if (hcreate_r(NUM_ENTRIES, &hash) == 0) {
      perror("hcreate_r");
      exit(1);
    }
        
    for (int i = 0; i < NUM_ENTRIES; i++) {
        // generate a random key
        int key_length = rand() % MAX_KEY_LENGTH + 1;
        char key[key_length + 1];
        for (int j = 0; j < key_length; j++) {
            key[j] = 'a' + rand() % 26;
        }
        key[key_length] = '\0';

        // generate a random value
        int value_length = rand() % MAX_VALUE_LENGTH + 1;
        char value[value_length + 1];
        for (int j = 0; j < value_length; j++) {
            value[j] = 'a' + rand() % 26;
        }
        value[value_length] = '\0';

	ENTRY e, *ep;
	e.key = key;
	e.data = (void*)value;
	if (hsearch_r(e, ENTER, &ep, &hash) == 0) {
	  perror("hsearch_r");
	  exit(1);
	}
    }

    hdestroy_r(&hash);
}

void cithtest() {
    cmap mymap;
    
    mapinit(&mymap, NUM_ENTRIES);
    
    for (int i = 0; i < NUM_ENTRIES; i++) {
        // generate a random key
        int key_length = rand() % MAX_KEY_LENGTH + 1;
        char key[key_length + 1];
        for (int j = 0; j < key_length; j++) {
            key[j] = 'a' + rand() % 26;
        }
        key[key_length] = '\0';

        // generate a random value
        int value_length = rand() % MAX_VALUE_LENGTH + 1;
        char value[value_length + 1];
        for (int j = 0; j < value_length; j++) {
            value[j] = 'a' + rand() % 26;
        }
        value[value_length] = '\0';

        mapadd(&mymap, key, value, strlen(value) + 1);
    }
}

void cithxtest() {
    cxmap mymap;
    
    xmapinit(&mymap, NUM_ENTRIES, NUM_ENTRIES*sizeof(char)*(MAX_VALUE_LENGTH+1));

    for (int i = 0; i < NUM_ENTRIES; i++) {
        // generate a random key
        int key_length = rand() % MAX_KEY_LENGTH + 1;
        char key[key_length + 1];
        for (int j = 0; j < key_length; j++) {
            key[j] = 'a' + rand() % 26;
        }
        key[key_length] = '\0';

        // generate a random value
        int value_length = rand() % MAX_VALUE_LENGTH + 1;
        char value[value_length + 1];
        for (int j = 0; j < value_length; j++) {
            value[j] = 'a' + rand() % 26;
        }
        value[value_length] = '\0';
        xmapadd(&mymap, key, value, strlen(value) + 1);
    }
}

/* Protocoll
   10K random values between 1-50 chars
   cmap:
   Searched in	 0.005368 seconds
   Cithed in	 0.013824 seconds
   V1 cxmap:
   Searched in	 0.005255 seconds
   Cithed in	 0.014571 seconds
   XCithed in	 0.201153 seconds
   V2 cxmap:
*/
int main(void) {
    clock_t start_time = clock();

    searchtest();
    
    double elapsed_time = (double)(clock() - start_time) / CLOCKS_PER_SEC;
    printf("Searched in\t %f seconds\n", elapsed_time);

    start_time = clock();

    cithtest();
    
    elapsed_time = (double)(clock() - start_time) / CLOCKS_PER_SEC;
    printf("Cithed in\t %f seconds\n", elapsed_time);

    start_time = clock();

    cithxtest();
    
    elapsed_time = (double)(clock() - start_time) / CLOCKS_PER_SEC;
    printf("XCithed in\t %f seconds\n", elapsed_time);
    
    exit(0);
}
